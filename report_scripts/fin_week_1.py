"""
fin_week_1.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
–§–æ—Ä–º–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Ozon Seller API
–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≤ Google Sheets.

–í–µ—Ä—Å–∏—è, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å p_campain_fin_1.py.
- –í—Å—è –ª–æ–≥–∏–∫–∞ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ run().
- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (—Ç–æ–∫–µ–Ω—ã, ID) –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
- –£–ª—É—á—à–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API.
"""
from __future__ import annotations
import time
from datetime import datetime, timedelta
from typing import Dict, List, Tuple

import requests
from dateutil import tz
import pandas as pd
import gspread
from gspread.exceptions import APIError
from google.oauth2.service_account import Credentials

from gspread_formatting import (
    CellFormat, Color, TextFormat,
    format_cell_range, batch_updater
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º clear_sheet_formatting —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π
try:
    from gspread_formatting import clear_sheet_formatting
except ImportError:
    def clear_sheet_formatting(worksheet, batch=None):
        req = {
            "updateCells": {
                "range": {"sheetId": worksheet._properties["sheetId"]},
                "fields": "userEnteredFormat"
            }
        }
        if batch is not None:
            batch.requests.append(req)
        else:
            worksheet.spreadsheet.batch_update({"requests": [req]})


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
URL_FIN   = 'https://api-seller.ozon.ru/v3/finance/transaction/list'
PAGE_SIZE = 1000
REQUEST_TIMEOUT = 60 # –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
OTHER_OP_NAME_COL   = "–î–æ–ø. —Ä–∞—Å—Ö–æ–¥—ã"
OTHER_OP_AMOUNT_COL = "–°—É–º–º–∞ –¥–æ–ø. —Ä–∞—Å—Ö–æ–¥–æ–≤"
COST_COL            = "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞—Ä—Ç–∏–∏"
TAX_COL             = "–ù–∞–ª–æ–≥–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"

# –§–æ—Ä–º–∞—Ç—ã —è—á–µ–µ–∫
HEAD_FMT  = CellFormat(backgroundColor=Color(1, 0.96, 0.62), textFormat=TextFormat(bold=True))
TOTAL_FMT = CellFormat(backgroundColor=Color(0.88, 0.88, 0.88), textFormat=TextFormat(bold=True))
BLANK_FMT = CellFormat(backgroundColor=Color(1, 1, 1), textFormat=TextFormat(bold=False))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def log(msg: str):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π."""
    print(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}", flush=True)

def col_letter(n: int) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏ –≤ –±—É–∫–≤—É (1 -> A, 2 -> B)."""
    s = ""
    while n > 0:
        n, r = divmod(n - 1, 26)
        s = chr(65 + r) + s
    return s

def week_start_tue(dt: datetime) -> datetime:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –æ—Ç—á—ë—Ç–Ω–æ–π –Ω–µ–¥–µ–ª–∏ (–≤—Ç–æ—Ä–Ω–∏–∫)."""
    return (dt - timedelta(days=(dt.weekday() - 1) % 7)).replace(
        hour=0, minute=0, second=0, microsecond=0
    )

def split_by_first_block(rows: List[List]) -> Tuple[List[List], List[List]]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –¥–≤–æ–π–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É."""
    top, rest, blanks = [], [], 0
    for i, line in enumerate(rows):
        top.append(line)
        if i == 0: continue
        if any(line):
            blanks = 0
        else:
            blanks += 1
            if blanks == 2:
                rest = rows[i + 1:]
                break
    return top, rest

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –†–∞–±–æ—Ç–∞ —Å Google Sheets  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def open_sheet_retry(creds, key, name, retries=5, delay=5):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ª–∏—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö API."""
    client = gspread.authorize(creds)
    for i in range(retries):
        try:
            return client.open_by_key(key).worksheet(name)
        except APIError as e:
            if e.response.status_code in (429, 503) and i < retries - 1:
                log(f"‚ö†Ô∏è Google API –≤–µ—Ä–Ω—É–ª {e.response.status_code}, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
                time.sleep(delay)
                delay *= 2
            else:
                raise

def safe_update(func, *args, **kwargs):
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ update/batch_update —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    retries, delay = 5, 5
    for i in range(retries):
        try:
            return func(*args, **kwargs)
        except APIError as e:
            if e.response.status_code in (429, 503) and i < retries - 1:
                log(f"‚ö†Ô∏è G-Sheets {func.__name__} –≤–µ—Ä–Ω—É–ª {e.response.status_code}; –ø–æ–≤—Ç–æ—Ä {i+1}/{retries-1} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
                time.sleep(delay)
                delay *= 2
            else:
                raise

def apply_styles(sheet, values: List[List]):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ —à–∞–ø–∫–µ, –∏—Ç–æ–≥–æ–≤—ã–º –∏ –ø—É—Å—Ç—ã–º —Å—Ç—Ä–æ–∫–∞–º."""
    last_col = col_letter(len(values[0]))
    clear_sheet_formatting(sheet)
    format_cell_range(sheet, f"A1:{last_col}1", HEAD_FMT)

    total_ranges, blank_ranges = [], []
    cur_total = cur_blank = None
    for i, row in enumerate(values, 1):
        if i == 1: continue
        is_total = row and row[0] == "–ò—Ç–æ–≥–æ"
        is_blank = not any(row)

        if is_total: cur_total = i if cur_total is None else cur_total
        elif cur_total is not None:
            total_ranges.append((cur_total, i - 1)); cur_total = None
        if is_blank: cur_blank = i if cur_blank is None else cur_blank
        elif cur_blank is not None:
            blank_ranges.append((cur_blank, i - 1)); cur_blank = None

    if cur_total is not None: total_ranges.append((cur_total, len(values)))
    if cur_blank is not None: blank_ranges.append((cur_blank, len(values)))

    with batch_updater(sheet.spreadsheet) as batch:
        for s, e in total_ranges:
            format_cell_range(sheet, f"A{s}:{last_col}{e}", TOTAL_FMT, batch)
        for s, e in blank_ranges:
            format_cell_range(sheet, f"A{s}:{last_col}{e}", BLANK_FMT, batch)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Ozon  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def month_by_month_operations(headers: dict, bottom_ts: datetime) -> List[Dict]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å Ozon API –ø–æ–º–µ—Å—è—á–Ω–æ —Å –ª–æ–≥–∏–∫–æ–π retry."""
    ops: List[Dict] = []
    cur = datetime.now(tz=tz.tzutc()).replace(microsecond=0)
    
    while cur.replace(day=1) >= bottom_ts:
        m_start = cur.replace(day=1, hour=0, minute=0, second=0)
        next_m  = m_start.replace(year=m_start.year + (m_start.month // 12), month=(m_start.month % 12) + 1)
        frm, to = m_start, next_m - timedelta(seconds=1)
        log(f"üóìÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {frm.strftime('%Y-%m')}...")
        page = 1
        
        while True:
            payload = {"filter": {"date": {"from": frm.strftime('%Y-%m-%dT%H:%M:%S.000Z'), "to": to.strftime('%Y-%m-%dT%H:%M:%S.000Z')}}, "page": page, "page_size": PAGE_SIZE}
            chunk = []
            
            for attempt in range(5): # 5 –ø–æ–ø—ã—Ç–æ–∫
                try:
                    r = requests.post(URL_FIN, headers=headers, json=payload, timeout=REQUEST_TIMEOUT)
                    if r.status_code == 429:
                        delay = 15 * (attempt + 1)
                        log(f"‚ö†Ô∏è API Ozon –≤–µ—Ä–Ω—É–ª 429. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                        time.sleep(delay)
                        continue
                    r.raise_for_status()
                    chunk = r.json().get("result", {}).get("operations", [])
                    break
                except requests.exceptions.RequestException as e:
                    if attempt == 4:
                        log(f"‚ùå –û—à–∏–±–∫–∞ API Ozon –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫: {e}")
                        raise
                    delay = 10 * (attempt + 1)
                    log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Ozon ({e}). –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                    time.sleep(delay)
            
            if not chunk: break
            ops.extend(chunk)
            if len(chunk) < PAGE_SIZE: break
            page += 1
        
        cur = m_start - timedelta(seconds=1)
    return ops

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def load_input_mapping(creds, spreadsheet_id: str, sheet_name: str) -> Dict[int, Tuple[float, float]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ SKU, —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞–ª–æ–≥–∞ –∏–∑ –ª–∏—Å—Ç–∞ input."""
    ws = open_sheet_retry(creds, spreadsheet_id, sheet_name)
    rows = ws.get_all_values()
    hdr = {h: i for i, h in enumerate(rows[0])}
    mp: Dict[int, Tuple[float, float]] = {}
    for r in rows[1:]:
        try:
            sku = int(r[hdr['SKU']])
            cost = float(r[hdr.get('–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å', 2)] or 0)
            tax = float(r[hdr.get('% –ù–∞–ª–æ–≥–∞', 3)] or 0) / 100
            mp[sku] = (cost, tax)
        except (ValueError, IndexError):
            continue
    return mp

def build_weekly_report(ops: List[Dict], lookup: Dict[int, Tuple[float, float]]) -> pd.DataFrame:
    """–°—Ç—Ä–æ–∏—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–µ—Ä–∞—Ü–∏—è—Ö."""
    sku_data: Dict[Tuple[datetime, int], Dict] = {}
    period_misc: Dict[datetime, Dict[str, float]] = {}
    extra_cols: set[str] = set()

    base_cols = ["–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤", "% –û–∑–æ–Ω", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞", "–û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞", "–ö–æ–ª-–≤–æ –æ–±—Ä–∞—Ç–Ω—ã—Ö", "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è", "–≠–∫–≤–∞–π—Ä–∏–Ω–≥", COST_COL, TAX_COL]
    STATIC_SET = set(base_cols)

    for op in ops:
        period = week_start_tue(datetime.strptime(op["operation_date"], "%Y-%m-%d %H:%M:%S").replace(tzinfo=tz.tzutc()))
        name, amount = op["operation_type_name"], op.get("amount", 0.0)
        accr, items, servs = op.get("accruals_for_sale", 0.0), op.get("items", []), op.get("services", [])

        if not items:
            period_misc.setdefault(period, {}).setdefault(name, 0.0)
            period_misc[period][name] += amount
            continue

        qtys = [it.get("quantity", 1) for it in items]
        tot_q = sum(qtys) or 1
        for it, q in zip(items, qtys):
            sku, ratio = it["sku"], q / tot_q
            row = sku_data.setdefault((period, sku), dict.fromkeys(base_cols, 0.0))
            op_type = op["operation_type"]

            if op_type == "OperationAgentDeliveredToCustomer" and accr > 0:
                row["–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤"] += q
                row["–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤"] += accr * ratio
                row["% –û–∑–æ–Ω"] += op.get("sale_commission", 0) * ratio
                for s in servs:
                    if s["name"] == "MarketplaceServiceItemDirectFlowLogistic": row["–õ–æ–≥–∏—Å—Ç–∏–∫–∞"] += s["price"] * ratio
                    elif s["name"] == "MarketplaceServiceItemDelivToCustomer": row["–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è"] += s["price"] * ratio
                cost, tax = lookup.get(sku, (0, 0))
                row[COST_COL] -= cost * q
                row[TAX_COL] -= accr * tax * ratio
            elif op_type == "OperationItemReturn":
                row["–ö–æ–ª-–≤–æ –æ–±—Ä–∞—Ç–Ω—ã—Ö"] += q
                for s in servs: row["–û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞"] += s["price"] * ratio
            elif op_type == "MarketplaceRedistributionOfAcquiringOperation": row["–≠–∫–≤–∞–π—Ä–∏–Ω–≥"] += amount * ratio
            else:
                if name not in STATIC_SET:
                    extra_cols.add(name)
                    row.setdefault(name, 0.0)
                row[name] = row.get(name, 0.0) + amount * ratio
    
    rows: List[Dict] = []
    all_periods = sorted({p for p, _ in sku_data} | period_misc.keys(), reverse=True)
    all_cols = ["–ü–µ—Ä–∏–æ–¥", "SKU"] + base_cols + sorted(extra_cols) + [OTHER_OP_NAME_COL, OTHER_OP_AMOUNT_COL]

    for period in all_periods:
        ptxt = f"{period:%d.%m.%Y} ‚Äì {(period + timedelta(days=6)):%d.%m.%Y}"
        block: List[Dict] = []
        
        period_skus = {sku: m for (pr, sku), m in sku_data.items() if pr == period}
        for sku, m in period_skus.items():
            rec = {"–ü–µ—Ä–∏–æ–¥": ptxt, "SKU": sku}
            rec.update({c: round(m.get(c, 0)) for c in base_cols})
            rec.update({c: round(m.get(c, 0)) for c in extra_cols})
            block.append(rec)
        
        misc_items = list(period_misc.get(period, {}).items())
        for idx in range(max(len(block), len(misc_items))):
            if idx >= len(block): block.append({})
            op_name, op_amount = misc_items[idx] if idx < len(misc_items) else ("", "")
            block[idx][OTHER_OP_NAME_COL] = op_name
            block[idx][OTHER_OP_AMOUNT_COL] = round(op_amount) if isinstance(op_amount, (int, float)) else op_amount
        
        if not block: continue
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Ä–∞—Å—á—ë—Ç–æ–º –∏—Ç–æ–≥–æ–≤
        for r in block:
            for c in all_cols:
                r.setdefault(c, "")

        total = {"–ü–µ—Ä–∏–æ–¥": "–ò—Ç–æ–≥–æ"}
        for col in all_cols:
            if col not in ["–ü–µ—Ä–∏–æ–¥", "SKU", OTHER_OP_NAME_COL]:
                total[col] = round(sum(float(r.get(col) or 0) for r in block))
        block.append(total)
        
        rows.extend(block)
        if period != all_periods[-1]: rows.extend([{}, {}]) # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏
        
    return pd.DataFrame(rows, columns=all_cols)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –ó–∞–≥—Ä—É–∑–∫–∞ –≤ Google Sheets  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def upload_to_gs(df: pd.DataFrame, creds, spreadsheet_id: str, sheet_name: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Google-–ª–∏—Å—Ç: –≤–µ—Ä—Ö–Ω–∏–π –ø–µ—Ä–∏–æ–¥ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è, –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è."""
    df_prepared = df.where(pd.notnull(df), None)
    sheet = open_sheet_retry(creds, spreadsheet_id, sheet_name)
    last_col = col_letter(len(df_prepared.columns))

    vals = [df_prepared.columns.tolist()] + df_prepared.values.tolist()
    # –ó–∞–º–µ–Ω—è–µ–º None –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
    vals = [[ "" if x is None else x for x in row] for row in vals]
    
    for i, row in enumerate(vals):
      if row and row[0] == "–ò—Ç–æ–≥–æ":
        # –§–æ—Ä–º—É–ª–∞ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ "–ò—Ç–æ–≥–æ"
        formula_cols = "DEFGHIJK" # –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        sum_formula = "+".join([f'{c}{i+1}' for c in formula_cols])
        # vals[i][1] = f"=SUM(D{i+1}:{last_col}{i+1})"
        
    old_vals = sheet.get_all_values()
    if len(old_vals) <= 1:
        log("üìù –õ–∏—Å—Ç –ø—É—Å—Ç ‚Äî –æ—Ç—á—ë—Ç –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
        safe_update(sheet.update, vals, 'A1', value_input_option='USER_ENTERED')
        safe_update(sheet.freeze, rows=1)
        apply_styles(sheet, vals)
        log("‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        return

    new_top, _ = split_by_first_block(vals)
    _, old_tail = split_by_first_block(old_vals)

    merged = [vals[0]] + new_top[1:] + old_tail
    
    safe_update(sheet.clear)
    safe_update(sheet.update, merged, 'A1', value_input_option='USER_ENTERED')
    safe_update(sheet.freeze, rows=1)
    apply_styles(sheet, merged)
    log("‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏–π –ø–µ—Ä–∏–æ–¥, —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ MAIN / RUN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def run(*,
        gs_creds_path: str,
        spreadsheet_id: str,
        output_sheet_name: str,
        input_sheet_name: str,
        ozon_client_id: str,
        ozon_api_key: str,
        start_date_str: str = "2022-01-01"
    ):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á—ë—Ç–∞.
    """
    log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ fin_week_1")

    try:
        creds = Credentials.from_service_account_file(
            gs_creds_path, scopes=["https://www.googleapis.com/auth/drive", "https://spreadsheets.google.com/feeds"]
        )
        
        log("üì• –ß–∏—Ç–∞—é –ª–∏—Å—Ç input —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º SKU...")
        sku_map = load_input_mapping(creds, spreadsheet_id, input_sheet_name)
        log(f"‚úî –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ: {len(sku_map)}")
        
        headers = {
            "Client-Id": ozon_client_id,
            "Api-Key": ozon_api_key,
            "Content-Type": "application/json"
        }
        bottom_ts = datetime.strptime(start_date_str, "%Y-%m-%d").replace(tzinfo=tz.tzutc())
        
        log("‚è¨ –°–∫–∞—á–∏–≤–∞—é –æ–ø–µ—Ä–∞—Ü–∏–∏ Ozon...")
        ops = month_by_month_operations(headers, bottom_ts)
        log(f"‚úî –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(ops)}")

        if not ops:
            log("‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return

        log("üìä –§–æ—Ä–º–∏—Ä—É—é –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç...")
        df = build_weekly_report(ops, sku_map)

        log("üì§ –û–±–Ω–æ–≤–ª—è—é Google Sheets...")
        upload_to_gs(df, creds, spreadsheet_id, output_sheet_name)
        
        log("üéâ –°–∫—Ä–∏–ø—Ç fin_week_1 —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!")

    except FileNotFoundError:
        log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: —Ñ–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {gs_creds_path}")
        raise
    except Exception as e:
        log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    #  Tauri's note:
    # ‚ö†Ô∏è –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤–∑—è—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ `fin_week_1.py`.
    # –û–Ω–∏ –∂–µ—Å—Ç–∫–æ –≤–ø–∏—Å–∞–Ω—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–ø—É—Å–∫–∞.
    # –í —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.

    run(
        gs_creds_path=r'E:/Ozon_API/teak-digit-438912-s0-cc0207cd6ee3.json',
        spreadsheet_id='1pkR_vV-g0cI8AUdQEAw2VTS4tBe78t5gD-ExqUnrpfo',
        output_sheet_name='week_fin',
        input_sheet_name='input',
        ozon_client_id='2567268',
        ozon_api_key='102efb35-db8d-4552-b6fa-75c0a66ce11d',
        start_date_str="2022-01-01"
    )
