import requests
import json
import pandas as pd
import os
from datetime import datetime, timezone, timedelta
import zipfile
import io
import time
import gspread
from google.oauth2.service_account import Credentials

# –¢–æ–∫–µ–Ω –∏ Client ID
client_secret = 'M6KXzabQefsFBJSQskwiCcIdEug0FfpY8JkceOGLcRaeGRk8_K4pi9VUUi4GEpF-WKfBYsaham1RQW4GyQ'
client_id = '67428955-1747226962895@advertising.performance.ozon.ru'

endpoint = '/api/client/token'
host = 'https://api-performance.ozon.ru'

headers = {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token
def refresh_access_token():
    global headers, access_token, token_time
    payload = {
        "client_id": client_id,
        "client_secret": client_secret,
        "grant_type": "client_credentials"
    }
    response = requests.post(host + endpoint, headers=headers, json=payload)
    if response.status_code == 200:
        data = response.json()
        access_token = data['access_token']
        token_time = datetime.now(timezone.utc)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        headers['Authorization'] = f'Bearer {access_token}'  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print(f"üîÑ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω: {access_token[:30]}...")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.status_code} ‚Äî {response.text}")
        return False

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º payload –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞
payload = {
    "client_id": client_id,
    "client_secret": client_secret,
    "grant_type": "client_credentials"
}

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
response = requests.post(host + endpoint, headers=headers, json=payload)
if response.status_code == 200:
    data = response.json()
    access_token = data['access_token']
    token_time = datetime.now(timezone.utc)  # –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    headers['Authorization'] = f'Bearer {access_token}'
    print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {access_token[:30]}...")
else:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {response.status_code} ‚Äî {response.text}")
    exit()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–º–ø–∞–Ω–∏–π
url = 'https://api-performance.ozon.ru:443/api/client/campaign'
response = requests.get(url, headers=headers)
data = response.json()
target_states = {'CAMPAIGN_STATE_RUNNING', 'CAMPAIGN_STATE_STOPPED', 'CAMPAIGN_STATE_INACTIVE'}
campaign_ids = [item['id'] for item in data['list'] if item.get('state') in target_states]
print(f"üìã ID –∫–∞–º–ø–∞–Ω–∏–π: {campaign_ids}")

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def chunk_list(lst, chunk_size):
    for i in range(0, len(lst), chunk_size):
        yield lst[i:i + chunk_size]

def wait_for_ready(uuid, check_interval=120):
    global headers
    url = f'https://api-performance.ozon.ru:443/api/client/statistics/{uuid}'
    print(f"‚è≥ –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ UUID: {uuid}")
    while True:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Ç–æ–∫–µ–Ω (25 –º–∏–Ω—É—Ç)
        if (datetime.now(timezone.utc) - token_time).total_seconds() > 1500:  # 25 –º–∏–Ω—É—Ç
            print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–±–Ω–æ–≤–ª—è–µ–º...")
            if not refresh_access_token():
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è UUID {uuid}")
                return None

        try:
            response = requests.get(url, headers=headers)
            if response.status_code == 403:  # –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 403 –¥–ª—è UUID {uuid}, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...")
                if not refresh_access_token():
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è UUID {uuid}")
                    return None
                continue  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º

            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ UUID {uuid}: {response.status_code}")
                time.sleep(check_interval)
                continue

            data = response.json()
            state = data.get("state")
            print(f"üîç UUID {uuid} ‚Üí state: {state}")

            if state == "OK":
                print(f"‚úÖ –û—Ç—á—ë—Ç –≥–æ—Ç–æ–≤: {uuid}")
                return data

            if state == "FAILED":
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ UUID {uuid}")
                return None

        except Exception as e:
            print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ UUID {uuid}: {e}")

        time.sleep(check_interval)

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
uuids = []

def get_moscow_dates(days=7):
    now_utc = datetime.now(timezone.utc)
    msk_offset = timedelta(hours=3)
    now_msk = now_utc + msk_offset
    date_to = now_msk.date()
    date_from = (now_msk - timedelta(days=days)).date()
    return date_from.strftime("%Y-%m-%d"), date_to.strftime("%Y-%m-%d")

date_from, date_to = get_moscow_dates(7)

for chunk in chunk_list(campaign_ids, 10):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞
    if (datetime.now(timezone.utc) - token_time).total_seconds() > 1500:
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        if not refresh_access_token():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞–Ω–∫")
            continue

    payload = {
        "campaigns": chunk,
        "dateFrom": date_from,
        "dateTo": date_to,
        "groupBy": "DATE"
    }

    url = 'https://api-performance.ozon.ru:443/api/client/statistics'
    print(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–π: {chunk}")
    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 200:
        uuid = response.json().get("UUID")
        print(f"üì• –ü–æ–ª—É—á–µ–Ω UUID: {uuid}")
        result = wait_for_ready(uuid)
        if result:
            uuids.append(uuid)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} ‚Äî {response.text}")

# === –ò–¢–û–ì ===
print("\nüìä –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ UUID:")
print(uuids)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API ---
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials_file = 'E:/Ozon_API/teak-digit-438912-s0-cc0207cd6ee3.json'

try:
    creds = Credentials.from_service_account_file(credentials_file, scopes=scope)
    client = gspread.authorize(creds)
    sheet = client.open_by_key('1pkR_vV-g0cI8AUdQEAw2VTS4tBe78t5gD-ExqUnrpfo').worksheet('unit-day')
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ Google –¢–∞–±–ª–∏—Ü—ã: {e}")
    exit()

all_data = []

for uuid in uuids:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç—á—ë—Ç–∞
    if (datetime.now(timezone.utc) - token_time).total_seconds() > 1500:
        print("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –æ—Ç—á—ë—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º...")
        if not refresh_access_token():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è UUID {uuid}")
            continue

    url = 'https://api-performance.ozon.ru/api/client/statistics/report'
    params = {'UUID': uuid}

    response = requests.get(url, headers=headers, params=params)

    if response.status_code == 403:  # –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –ø—Ä–∏ 403
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 403 –¥–ª—è UUID {uuid} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω...")
        if not refresh_access_token():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è UUID {uuid}")
            continue
        response = requests.get(url, headers=headers, params=params)  # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å

    if response.status_code == 200 and 'application/zip' in response.headers.get('Content-Type', ''):
        try:
            with zipfile.ZipFile(io.BytesIO(response.content)) as zip_ref:
                for file_name in zip_ref.namelist():
                    if file_name.endswith('.csv') or file_name.endswith('.txt'):
                        with zip_ref.open(file_name) as f:
                            decoded = io.TextIOWrapper(f, encoding='utf-8')
                            df = pd.read_csv(decoded, sep=';', skiprows=1)

                            required_columns = ['–î–µ–Ω—å', 'sku', '–†–∞—Å—Ö–æ–¥, ‚ÇΩ, —Å –ù–î–°']
                            if not all(col in df.columns for col in required_columns):
                                continue

                            df_selected = df[required_columns].copy()
                            df_selected = df_selected[df_selected['–î–µ–Ω—å'] != '–í—Å–µ–≥–æ']
                            df_selected = df_selected[
                                df_selected['sku'].notna() & ~df_selected['sku'].isin([float('inf'), -float('inf')])]

                            try:
                                df_selected['sku'] = df_selected['sku'].astype(int)
                            except Exception:
                                continue

                            all_data.append(df_selected)
        except zipfile.BadZipFile:
            pass
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –¥–ª—è UUID {uuid}: {response.status_code}")

# –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
if all_data:
    combined_df = pd.concat(all_data, ignore_index=True)

    try:
        combined_df['–†–∞—Å—Ö–æ–¥, ‚ÇΩ, —Å –ù–î–°'] = combined_df['–†–∞—Å—Ö–æ–¥, ‚ÇΩ, —Å –ù–î–°'].replace({',': '.'}, regex=True).astype(float)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ '–†–∞—Å—Ö–æ–¥, ‚ÇΩ, —Å –ù–î–°': {e}")
        exit()

    grouped_df = combined_df.groupby(['–î–µ–Ω—å', 'sku'], as_index=False)['–†–∞—Å—Ö–æ–¥, ‚ÇΩ, —Å –ù–î–°'].sum()
    grouped_df.columns = ['date', 'sku', 'rub']

    # --- –†–∞–±–æ—Ç–∞ —Å Google –¢–∞–±–ª–∏—Ü–µ–π ---
    existing_values = sheet.get_all_values()
    sheet_df = pd.DataFrame(existing_values[1:], columns=existing_values[0])

    required_sheet_columns = ['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'SKU']
    if not all(col in sheet_df.columns for col in required_sheet_columns):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã {required_sheet_columns} –≤ Google –¢–∞–±–ª–∏—Ü–µ")
        exit()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∏ SKU
    sheet_df['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'] = sheet_df['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'].apply(
        lambda x: x.split(' ')[0] if isinstance(x, str) and ' ' in x else x)
    try:
        sheet_df['SKU'] = pd.to_numeric(sheet_df['SKU'], errors='coerce').astype('Int64')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ 'SKU': {e}")
        exit()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
    updates = []
    sheet_data = sheet_df[['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'SKU']].copy()
    sheet_data['row_index'] = sheet_data.index + 2  # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç—Ä–æ–∫ –≤ Google –¢–∞–±–ª–∏—Ü–µ
    sheet_data['rub'] = None

    for _, row in grouped_df.iterrows():
        date = row['date']
        sku = row['sku']
        rub = row['rub']
        match = sheet_data[(sheet_data['–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'] == date) & (sheet_data['SKU'] == sku)]
        if not match.empty:
            sheet_data.loc[match.index, 'rub'] = rub

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ F
    update_data = [[row['rub'] if row['rub'] is not None else ''] for _, row in sheet_data.iterrows()]
    update_range = f'F2:F{len(sheet_data) + 1}'

    # –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ —Å—Ç–æ–ª–±–µ—Ü F
    try:
        sheet.update(range_name=update_range, values=update_data)
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É: {e}")
        exit()
else:
    print("\n‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –æ—Ç—á—ë—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")