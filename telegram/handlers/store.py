from __future__ import annotations
import asyncio, logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from telegram.keyboards import kb_store_menu, kb_del_confirm, kb_main
from core.services.gs_db import GsDB
from core.tasks.queue import enqueue
from core.tasks.report_runner import run_report

log = logging.getLogger(__name__)
router = Router(name="store")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  FSM –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Rename(StatesGroup):
    waiting_name = State()


@router.callback_query(F.data.startswith("store_"))
async def open_store(cb: CallbackQuery):
    store_id = cb.data.removeprefix("store_")
    db = GsDB()
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    stores = await db.get_stores_by_owner(cb.from_user.id)
    if store_id not in [s["store_id"] for s in stores]:
        await cb.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await cb.message.edit_text(
        f"<b>–ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞</b>  <code>{store_id}</code>",
        reply_markup=kb_store_menu(store_id),
    )
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data.startswith("rename_"))
async def rename_ask(cb: CallbackQuery, state: FSMContext):
    sid = cb.data.removeprefix("rename_")
    await state.update_data(rename_sid=sid, prev_mid=cb.message.message_id)
    await cb.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:")
    await state.set_state(Rename.waiting_name)
    await cb.answer()


@router.message(Rename.waiting_name)
async def rename_save(msg: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    sid, prev_mid = data["rename_sid"], data["prev_mid"]
    db = GsDB()
    # –æ–±–Ω–æ–≤–ª—è–µ–º Stores
    ws = await db._ws("Stores")
    rows = (await db.sheets.read_all(ws))[1:]
    for idx, r in enumerate(rows, start=2):
        if r[0] == sid:
            ws.update(f"D{idx}", [[msg.text.strip()]])
            break
    await bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
    await bot.edit_message_text(
        chat_id=msg.chat.id, message_id=prev_mid,
        text="‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
    )
    await state.clear()


# ‚îÄ‚îÄ‚îÄ –£–¥–∞–ª–µ–Ω–∏–µ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ) ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data.startswith("delask_"))
async def delete_ask(cb: CallbackQuery):
    sid = cb.data.removeprefix("delask_")
    await cb.message.edit_reply_markup(reply_markup=kb_del_confirm(sid))
    await cb.answer()


@router.callback_query(F.data.startswith("dellater_"))
async def delete_cancel(cb: CallbackQuery):
    sid = cb.data.removeprefix("dellater_")
    await cb.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                               reply_markup=kb_store_menu(sid))
    await cb.answer()


@router.callback_query(F.data.startswith("delok_"))
async def delete_ok(cb: CallbackQuery, bot: Bot):
    sid = cb.data.removeprefix("delok_")
    db = GsDB()
    ws = await db._ws("Stores")
    rows = (await db.sheets.read_all(ws))[1:]
    for idx, r in enumerate(rows, start=2):
        if r[0] == sid:
            ws.delete_rows(idx)
            break
    await cb.message.edit_text("üóë –ú–∞–≥–∞–∑–∏–Ω —É–¥–∞–ª—ë–Ω.")
    stores = await db.get_stores_by_owner(cb.from_user.id)
    await cb.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=kb_main(
            [(s["store_id"], s["name"], s["marketplace"]) for s in stores]
        ),
    )
    await cb.answer()


# ‚îÄ‚îÄ‚îÄ –ó–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–∞ unit-day ‚îÄ‚îÄ‚îÄ
@router.callback_query(F.data.startswith("unit_"))
async def run_unit(cb: CallbackQuery):
    sid = cb.data.removeprefix("unit_")
    db = GsDB()
    ws = await db._ws("Stores")
    rows = (await db.sheets.read_all(ws))[1:]
    store_row = next((r for r in rows if r[0] == sid), None)
    if not store_row:
        await cb.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # —Å–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
    creds_json = store_row[4]
    sheet_id   = store_row[5]
    sa_path    = store_row[6]
    mp         = store_row[2]

    await cb.answer("‚è≥ –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞‚Ä¶")
    await enqueue(run_report, {
        "store_id": sid, "marketplace": mp,
        "credentials_json": creds_json,
        "sheet_id": sheet_id,
        "sa_path": sa_path,
    })
