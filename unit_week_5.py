#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç Ozon (–≤—Ç–æ—Ä–Ω–∏–∫ ‚Üí –≤—Ç–æ—Ä–Ω–∏–∫) ‚Üí Google Sheets

‚Ä¢ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–æ–≥–æ ‚â§ 30 –¥–Ω–µ–π (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ API);
‚Ä¢ page_size = 1000 (–º–∞–∫—Å–∏–º—É–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π /v3/finance/transaction/list);
‚Ä¢ transaction_type —É–±—Ä–∞–Ω ‚Äî –º–µ—Ç–æ–¥ —Å–∞–º –≤–µ—Ä–Ω—ë—Ç –≤—Å–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π;
‚Ä¢ –≤ —Å–ª—É—á–∞–µ HTTP 400 –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–ª–æ –æ—à–∏–±–∫–∏ –∏ –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç;
‚Ä¢ –æ—Å—Ç–∞–ª—å–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ (–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤, –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã, –í—ã–≤–æ–¥ –≤ —Ç–æ–ø,
  –£—Å–ª—É–≥–∏ FBO –∏ —Ç. –¥.) –Ω–µ –∏–∑–º–µ–Ω—è–ª–∞—Å—å.
"""

from __future__ import annotations
import requests
from datetime import datetime, timedelta
from dateutil import tz
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import sys
import json

# ---------- Ozon API ----------
TOKEN_OZ  = '102efb35-db8d-4552-b6fa-75c0a66ce11d'
CLIENT_ID = '2567268'
URL_FIN   = 'https://api-seller.ozon.ru/v3/finance/transaction/list'
PAGE_SIZE = 1000                  # –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π API
MAX_DAYS  = 30                    # –¥–∏–∞–ø–∞–∑–æ–Ω ‚â§ 30 –¥–Ω–µ–π
BOTTOM_TS = datetime(2022, 1, 1, tzinfo=tz.tzutc())

HEADERS = {
    "Client-Id": CLIENT_ID,
    "Api-Key": TOKEN_OZ,
    "Content-Type": "application/json"
}

# ---------- Google Sheets ----------
SCOPES         = ['https://spreadsheets.google.com/feeds',
                  'https://www.googleapis.com/auth/drive']
CREDS_FILE     = 'E:/Ozon_API/teak-digit-438912-s0-cc0207cd6ee3.json'
SPREADSHEET_ID = '1pkR_vV-g0cI8AUdQEAw2VTS4tBe78t5gD-ExqUnrpfo'
SHEET_NAME     = 'week_fin'

# ---------- –¢–∏–ø—ã –¥–ª—è ¬´–£—Å–ª—É–≥ FBO¬ª ----------
FBO_TYPES = {
    "MarketplaceServiceItemCrossdocking",
    "OperationMarketplaceServiceSupplyInboundCargoShortage",
    "OperationMarketplaceSupplyExpirationDateProcessing"
}

# --------------------------------------------------------------------------- #
#                              DATA COLLECTION                                #
# --------------------------------------------------------------------------- #
def get_finance_operations() -> list[dict]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –¥–µ–ª–∞—è –∑–∞–ø—Ä–æ—Å **–ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º—É –º–µ—Å—è—Ü—É**.
    –î–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –ª–µ–∂–∏—Ç —Å—Ç—Ä–æ–≥–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞, —á—Ç–æ
    —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ Ozon API ¬´only one month allowed¬ª.
    """
    all_ops: list[dict] = []
    tz_utc = tz.tzutc()

    # –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å (UTC) –∏ –æ–±—Ä–µ–∑–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã
    cursor = datetime.now(tz=tz_utc).replace(microsecond=0)

    while cursor.replace(day=1) >= BOTTOM_TS:
        # –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
        month_start = cursor.replace(day=1, hour=0, minute=0, second=0)
        # –∫–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞ = –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –º–∏–Ω—É—Å 1 —Å–µ–∫—É–Ω–¥–∞
        if month_start.month == 12:
            next_month_start = month_start.replace(year=month_start.year + 1,
                                                   month=1)
        else:
            next_month_start = month_start.replace(month=month_start.month + 1)
        month_end = next_month_start - timedelta(seconds=1)

        # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º —Å ¬´—Ç–µ–∫—É—â–∏–º¬ª –º–µ—Å—è—Ü–µ–º ‚Äî –æ–±—Ä–µ–∑–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É now
        to_date = min(cursor, month_end)
        frm = month_start
        if frm < BOTTOM_TS:
            frm = BOTTOM_TS

        page = 1
        while True:
            payload = {
                "filter": {
                    "date": {
                        "from": frm.strftime('%Y-%m-%dT%H:%M:%S.000Z'),
                        "to"  : to_date.strftime('%Y-%m-%dT%H:%M:%S.000Z')
                    }
                },
                "page": page,
                "page_size": PAGE_SIZE
            }

            resp = requests.post(URL_FIN, headers=HEADERS, json=payload)
            if resp.status_code == 400:
                print("üî¥ 400 Bad Request:", resp.text, file=sys.stderr)
                sys.exit(1)
            resp.raise_for_status()

            chunk = resp.json().get("result", {}).get("operations", [])
            if not chunk:
                break

            all_ops.extend(chunk)
            if len(chunk) < PAGE_SIZE:
                break
            page += 1

        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        cursor = month_start - timedelta(seconds=1)

    return all_ops

# --------------------------------------------------------------------------- #
#                    –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ò –ê–ì–†–ï–ì–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò                   #
# --------------------------------------------------------------------------- #
def week_start_tue(dt: datetime) -> datetime:
    """UTC 00:00 –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–µ—Ä–µ–¥ dt (–∏–ª–∏ —Å–∞–º–æ–≥–æ dt, –µ—Å–ª–∏ –≤—Ç–æ—Ä–Ω–∏–∫)."""
    delta = (dt.weekday() - 1) % 7  # Tue=1
    return (dt - timedelta(days=delta)).replace(hour=0, minute=0,
                                                second=0, microsecond=0)

def build_weekly_report(ops: list[dict]) -> pd.DataFrame:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç DataFrame —Å –ø–æ–ª–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º (—Å–º. –¢–ó)."""
    sku_cache: dict[tuple[datetime, int], dict] = {}
    period_extra: dict[datetime, dict] = {}

    for op in ops:
        # --- –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è ---
        op_dt  = datetime.strptime(op["operation_date"],
                                   "%Y-%m-%d %H:%M:%S").replace(tzinfo=tz.tzutc())
        period = week_start_tue(op_dt)
        otype  = op["operation_type"]
        amount = op.get("amount", 0)
        accr   = op.get("accruals_for_sale", 0)
        items  = op.get("items", [])
        servs  = op.get("services", [])

        # --- –∞–≥—Ä–µ–≥–∞—Ç—ã –±–µ–∑ SKU (–¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã, –¢–æ–ø, FBO) ---
        pe = period_extra.setdefault(period, {"stencil": 0.0,
                                              "top": 0.0,
                                              "fbo": 0.0})
        if otype == "OperationElectronicServiceStencil":
            pe["stencil"] += amount
        elif otype == "OperationGettingToTheTop":
            pe["top"] += amount
        elif otype in FBO_TYPES:
            pe["fbo"] += amount

        for s in servs:
            if s["name"] in FBO_TYPES:
                pe["fbo"] += s["price"]

        # --- –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ ---
        if not items:
            continue

        qtys = [it.get("quantity", 1) for it in items]
        total_q = sum(qtys) or 1

        for it, q in zip(items, qtys):
            sku   = it["sku"]
            key   = (period, sku)
            ratio = q / total_q

            if key not in sku_cache:
                sku_cache[key] = {
                    "orders_qty"        : 0,
                    "orders_sum"        : 0.0,
                    "sale_commission"   : 0.0,
                    "logistics"         : 0.0,
                    "last_mile"         : 0.0,
                    "reverse_logistics" : 0.0,
                    "agent_services"    : 0.0,
                    "acquiring"         : 0.0
                }
            row = sku_cache[key]

            if otype == "OperationAgentDeliveredToCustomer":
                if accr > 0:                       # —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
                    row["orders_qty"] += q
                row["orders_sum"]      += accr * ratio
                row["sale_commission"] += op.get("sale_commission", 0) * ratio
                for s in servs:
                    if s["name"] == "MarketplaceServiceItemDirectFlowLogistic":
                        row["logistics"] += s["price"] * ratio
                    elif s["name"] == "MarketplaceServiceItemDelivToCustomer":
                        row["last_mile"] += s["price"] * ratio

            elif otype == "OperationItemReturn":
                for s in servs:
                    if s["name"] == "MarketplaceServiceItemReturnFlowLogistic":
                        row["reverse_logistics"] += s["price"] * ratio
                    else:
                        row["agent_services"] += s["price"] * ratio

            elif otype == "MarketplaceRedistributionOfAcquiringOperation":
                row["acquiring"] += amount * ratio

    # ---------------- DataFrame ----------------
    rows = []
    for period, ex in period_extra.items():
        pers = f"{period:%d.%m.%Y} - {(period+timedelta(days=6)):%d.%m.%Y}"
        rows.append({
            "–ü–µ—Ä–∏–æ–¥": pers, "SKU": "",
            "–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤": "", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤": "", "% –û–∑–æ–Ω": "",
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": "", "–û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞": "", "–£—Å–ª—É–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤": "",
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è": "", "–≠–∫–≤–∞–π—Ä–∏–Ω–≥": "",
            "–¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã": int(round(ex["stencil"])),
            "–í—ã–≤–æ–¥ –≤ —Ç–æ–ø": int(round(ex["top"])),
            "–£—Å–ª—É–≥–∏ FBO": int(round(ex["fbo"])),
            "_period": period, "_rank": 0
        })

    for (period, sku), m in sku_cache.items():
        pers = f"{period:%d.%m.%Y} - {(period+timedelta(days=6)):%d.%m.%Y}"
        rows.append({
            "–ü–µ—Ä–∏–æ–¥": pers, "SKU": sku,
            "–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤": m["orders_qty"],
            "–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤": int(round(m["orders_sum"])),
            "% –û–∑–æ–Ω": int(round(m["sale_commission"])),
            "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": int(round(m["logistics"])),
            "–û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞": int(round(m["reverse_logistics"])),
            "–£—Å–ª—É–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤": int(round(m["agent_services"])),
            "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è": int(round(m["last_mile"])),
            "–≠–∫–≤–∞–π—Ä–∏–Ω–≥": int(round(m["acquiring"])),
            "–¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã": "", "–í—ã–≤–æ–¥ –≤ —Ç–æ–ø": "", "–£—Å–ª—É–≥–∏ FBO": "",
            "_period": period, "_rank": 1
        })

    df = pd.DataFrame(rows)
    df.sort_values(["_period", "_rank", "SKU"],
                   ascending=[False, True, True], inplace=True)
    df.drop(columns=["_period", "_rank"], inplace=True)
    df.reset_index(drop=True, inplace=True)

    columns = ["–ü–µ—Ä–∏–æ–¥", "SKU", "–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤", "–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤", "% –û–∑–æ–Ω",
               "–õ–æ–≥–∏—Å—Ç–∏–∫–∞", "–û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞", "–£—Å–ª—É–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤",
               "–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è", "–≠–∫–≤–∞–π—Ä–∏–Ω–≥",
               "–¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã", "–í—ã–≤–æ–¥ –≤ —Ç–æ–ø", "–£—Å–ª—É–≥–∏ FBO"]
    return df[columns]

# --------------------------------------------------------------------------- #
#                          EXPORT TO GOOGLE SHEETS                            #
# --------------------------------------------------------------------------- #
def upload_to_gs(df: pd.DataFrame) -> None:
    try:
        creds  = Credentials.from_service_account_file(CREDS_FILE, scopes=SCOPES)
        client = gspread.authorize(creds)
        sheet  = client.open_by_key(SPREADSHEET_ID).worksheet(SHEET_NAME)
    except Exception as e:
        print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è / –æ—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞:", e, file=sys.stderr)
        sys.exit(1)

    values = [df.columns.tolist()]
    cur = None
    for _, r in df.iterrows():
        if cur is None:
            cur = r["–ü–µ—Ä–∏–æ–¥"]
        elif r["–ü–µ—Ä–∏–æ–¥"] != cur:
            values.extend([[""] * len(df.columns), [""] * len(df.columns)])
            cur = r["–ü–µ—Ä–∏–æ–¥"]
        values.append([str(v) if v != "" else "" for v in r.tolist()])

    try:
        sheet.clear()
        sheet.update(values=values, range_name='A1',
                     value_input_option='USER_ENTERED')
        sheet.freeze(rows=1)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Google Sheets")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç:", e, file=sys.stderr)
        sys.exit(1)

# --------------------------------------------------------------------------- #
#                                     MAIN                                    #
# --------------------------------------------------------------------------- #
if __name__ == "__main__":
    print("‚è¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ Ozon ‚Ä¶")
    ops = get_finance_operations()
    print(f"‚úî –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(ops)}")

    print("üìä –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç ‚Ä¶")
    df_report = build_weekly_report(ops)

    print("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Google Sheets ‚Ä¶")
    upload_to_gs(df_report)
