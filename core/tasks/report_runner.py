"""
–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—á—ë—Ç unit_day_5 –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ.

store_cfg =
{
  store_id, marketplace, credentials_json, sheet_id, sa_path,
  chat_id,           # –∫–æ–º—É —Å–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  menu_message_id    # id —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–¥–µ –∂–¥—ë—Ç –∫–Ω–æ–ø–∫–∞ üìù
}
"""
from __future__ import annotations
import json, asyncio, inspect, logging
from importlib import import_module
from functools import partial
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest

log = logging.getLogger(__name__)


async def run_report(store_cfg: dict):
    bot: Bot = Bot.get_current()

    creds = json.loads(store_cfg["credentials_json"])
    kwargs = dict(
        token_oz=creds["api_key"],
        client_id=creds.get("client_id", ""),
        gs_cred=store_cfg["sa_path"],
        spread_id=store_cfg["sheet_id"],
    )

    chat_id = store_cfg["chat_id"]
    menu_mid = store_cfg.get("menu_message_id")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None

    # –∑–∞–º–µ–Ω—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫–Ω–æ–ø–∫–∏ –Ω–∞ ¬´‚è≥‚Ä¶¬ª
    try:
        if menu_mid:
            await bot.edit_message_reply_markup(
                chat_id, menu_mid,
                reply_markup=None
            )
            await bot.send_message(chat_id, "‚è≥ –°—Ç—Ä–æ—é –æ—Ç—á—ë—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
    except TelegramBadRequest:
        pass  # —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ

    try:
        mod = import_module("report_scripts.unit_day_5")
        func = getattr(mod, "run")

        if inspect.iscoroutinefunction(func):
            await func(**kwargs)
        else:
            loop = asyncio.get_running_loop()
            await loop.run_in_executor(None, partial(func, **kwargs))

        await bot.send_message(
            chat_id,
            "‚úÖ –û—Ç—á—ë—Ç unit-day –æ–±–Ω–æ–≤–ª—ë–Ω.",
        )
        log.info("unit-day OK for store %s", store_cfg["store_id"])

    except Exception as e:
        await bot.send_message(
            chat_id,
            f"‚ùå –û—Ç—á—ë—Ç –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω: {e}",
        )
        log.exception("unit-day FAIL for store %s", store_cfg["store_id"])
