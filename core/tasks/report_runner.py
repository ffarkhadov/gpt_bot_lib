"""
–§–æ–Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–∞ unit_day_5.

store_cfg =
{
  "store_id": ...,
  "marketplace": ...,
  "credentials_json": '{"client_id":"‚Ä¶","api_key":"‚Ä¶"}',
  "sheet_id": "1AbC...",
  "sa_path":  "/path/sa.json",
  "chat_id": <int>,               # –∫–æ–º—É –æ—Ç–≤–µ—á–∞–µ–º
  "menu_message_id": <int | None> # –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ üìù
}
"""
from __future__ import annotations
import asyncio, json, inspect, logging
from functools import partial
from importlib import import_module

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from config import settings

log = logging.getLogger(__name__)


async def run_report(store_cfg: dict):
    # —Å–æ–∑–¥–∞—ë–º Bot –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Å–µ–≥–¥–∞ –±—ã–ª
    bot = Bot(settings.BOT_TOKEN, parse_mode="HTML")

    chat_id = store_cfg["chat_id"]
    menu_mid = store_cfg.get("menu_message_id")

    # –≤—Å–ø–ª—ã–≤–∞—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    prog_msg_id: int | None = None
    try:
        prog = await bot.send_message(chat_id, "‚è≥ –°—Ç—Ä–æ—é –æ—Ç—á—ë—Ç, –ø–æ–¥–æ–∂–¥–∏—Ç–µ‚Ä¶")
        prog_msg_id = prog.message_id
    except TelegramBadRequest:
        pass

    # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    creds = json.loads(store_cfg["credentials_json"])
    kwargs = dict(
        token_oz=creds["api_key"],
        client_id=creds.get("client_id", ""),
        gs_cred=store_cfg["sa_path"],
        spread_id=store_cfg["sheet_id"],
    )

    try:
        # –∏–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
        mod = import_module("report_scripts.unit_day_5")
        func = getattr(mod, "run")

        if inspect.iscoroutinefunction(func):
            await func(**kwargs)
        else:
            loop = asyncio.get_running_loop()
            await loop.run_in_executor(None, partial(func, **kwargs))

        # —É—Å–ø–µ—Ö
        if prog_msg_id:
            await bot.delete_message(chat_id, prog_msg_id)
        await bot.send_message(chat_id, "‚úÖ –û—Ç—á—ë—Ç unit-day –æ–±–Ω–æ–≤–ª—ë–Ω.")
        log.info("unit-day OK for store %s", store_cfg["store_id"])

    except Exception as e:
        # –æ—à–∏–±–∫–∞
        if prog_msg_id:
            await bot.delete_message(chat_id, prog_msg_id)
        await bot.send_message(chat_id, f"‚ùå –û—Ç—á—ë—Ç –Ω–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω:\n<code>{e}</code>")
        log.exception("unit-day FAIL for store %s", store_cfg["store_id"])
